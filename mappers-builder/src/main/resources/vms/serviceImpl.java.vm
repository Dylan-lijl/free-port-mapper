#set($hasStateColumn = false)
#set($hasCreateTimeColumn = false)
#set($hasUpdateTimeColumn = false)
#set($idType = "Integer")
#set($clientInfo = ${entity})
#set($serviceVar = ${table.serviceName.substring(0, 1).toLowerCase()}+${table.serviceName.substring(1)})
#set($clientInfoDesc = ${table.comment}+"")
#foreach($field in ${table.fields})
    #if($field.keyFlag)
        #set($idType = $field.propertyType)
    #end
    #if($field.propertyName == 'state')
        #set($hasStateColumn = true)
    #end
    #if($field.propertyName == 'createTime')
        #set($hasCreateTimeColumn = true)
    #end
    #if($field.propertyName == 'updateTime')
        #set($hasUpdateTimeColumn = true)
    #end
#end
#macro(firstUpper $f)${f.substring(0, 1).toUpperCase()}${f.substring(1)}#end
package ${package.ServiceImpl};
import cn.hutool.core.bean.BeanUtil;
import cn.hutool.core.util.ObjectUtil;
import cn.hutool.core.util.StrUtil;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.conditions.update.LambdaUpdateWrapper;
import com.baomidou.mybatisplus.core.toolkit.ObjectUtils;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import org.springframework.stereotype.Service;
import pub.carzy.free_port_mapper.common.basic.CreateResponse;
import pub.carzy.free_port_mapper.common.basic.UpdateResponse;
import ${cfg.parent}.dto.request.List${clientInfo}Request;
import ${cfg.parent}.dto.request.Info${clientInfo}Request;
import ${cfg.parent}.dto.request.Create${clientInfo}Request;
import ${cfg.parent}.dto.request.Update${clientInfo}Request;
import ${cfg.parent}.dto.request.Delete${clientInfo}Request;
#if(${table.hasStateColumn})
import ${cfg.parent}.dto.request.Update${clientInfo}StateRequest;
#end
import ${cfg.parent}.dto.response.Info${clientInfo}Response;
import ${cfg.parent}.dto.response.List${clientInfo}Response;
import pub.carzy.free_port_mapper.common.api.CommonPage;
import ${package.Entity}.${table.entityName};
import ${package.Mapper}.${table.mapperName};
import pub.carzy.free_port_mapper.server.util.MybatisPageToCommonPage;
import pub.carzy.free_port_mapper.common.util.ResponseCode;
import pub.carzy.free_port_mapper.server.exces.ApplicationException;
import org.springframework.transaction.annotation.Transactional;

import java.util.Date;

/**
 * ${clientInfo} Service实现类
 * @author ${author}
 * @since ${date}
 */
@Service
public class ${table.serviceImplName} extends ${superServiceImplClass}<${table.mapperName}, ${entity}> implements ${table.serviceName} {

    @Override
    public CommonPage<List${clientInfo}Response> pageList(List${clientInfo}Request request){
        LambdaQueryWrapper<${clientInfo}> wrapper=new LambdaQueryWrapper<>();
        // 模糊查询
        if(StrUtil.isNotBlank(request.getKeyword())){
            wrapper.and(q->{
            #foreach($field in $table.fields)
                #if($field.propertyType == 'String')
                        q.like(${clientInfo}::get#firstUpper($field.propertyName),request.getKeyword());
                #end
            #end
            });
        }
        Page<${clientInfo}> page=page(new Page<>(request.getPageNum(),request.getPageSize()),wrapper);
        return MybatisPageToCommonPage.convert(page,List${clientInfo}Response.class);
    }

    @Override
    public Info${clientInfo}Response infoData(Info${clientInfo}Request request){
        ${clientInfo} info=getById(request.getId());
        if(info==null){
        throw new ApplicationException(ResponseCode.DATA_NOT_EXIST);
        }
        return BeanUtil.copyProperties(info,Info${clientInfo}Response.class);
    }

    @Override
    public CreateResponse<Integer> createData(Create${clientInfo}Request request){
        ${clientInfo} info=BeanUtil.copyProperties(request, ${clientInfo}.class);
        // 设置默认值以及创建时间 todo
        Date now=new Date();
        #if($hasCreateTimeColumn)
        info.setCreateTime(now);
        #end
        #if($hasUpdateTimeColumn)
        info.setUpdateTime(now);
        #end
        if(!save(info)){
            throw new ApplicationException(ResponseCode.FAILED_TO_CREATE_DATA);
        }
        return new CreateResponse<>(info.getId());
    }

    @Override
    public UpdateResponse updateData(Update${clientInfo}Request request){
        // 修改逻辑 todo
        return new UpdateResponse(false);
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public void deleteData(Delete${clientInfo}Request request) {
        if (request.isOnly()) {
            removeById(request.first());
        } else {
            removeByIds(request.getIds());
        }
    }

    #if($hasStateColumn)
    @Override
    public void updateStateData(Update${clientInfo}StateRequest request){
        // 更新状态
        LambdaUpdateWrapper<${clientInfo}> wrapper=new LambdaUpdateWrapper<>();
        wrapper.set(${clientInfo}::getState, request.getState())
    #if($hasUpdateTimeColumn)
        wrapper.set(${clientInfo}::getUpdateTime, new Date());
    #end
        wrapper.eq(${clientInfo}::getId, request.getId());
        if (!update(wrapper)) {
            throw new ApplicationException(ResponseCode.FAILED_TO_UPDATE_DATA);
        }
    }
    #end
}
